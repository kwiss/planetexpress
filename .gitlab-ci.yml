include:
  - local: .gitlab/ci/base_register_stage.yml
  - local: .gitlab/ci/base_yarn_workspace_install.yml

variables:
  # CI variables
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_TLS_CERTDIR: '' # really important
  GIT_STRATEGY: fetch
  GIT_DEPTH: 5
  
  # Globals
  DOCKER_VERSION: "18"
  PYTHON_VERSION: "3.6-alpine"

stages:
- "Prepare"
- "Build Image"
- "Registration"
- "Deploy"

################################################################################################
###################################               ##############################################
###################################     PREPARE   ##############################################
###################################               ##############################################
################################################################################################


# Install api:
#   extends: .base_yarn_workspace_install
#   variables:
#     CONTEXT: api
#   before_script:
#     - find packages -maxdepth 1 -type d -not -name api -not -name knex | tail -n +2 | xargs rm -rf
#   artifacts:
#     expire_in: 1 day
#     paths:
#       - node_modules
#       - packages/api/node_modules

Install app:
  extends: .base_yarn_workspace_install
  variables:
    CONTEXT: app
  before_script:
    - find packages -maxdepth 1 -type d -not -name app | tail -n +2 | xargs rm -rf
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules
      - packages/app/node_modules

################################################################################################
###################################                    #########################################
###################################     BUILD IMAGE    #########################################
###################################                    #########################################
################################################################################################

Build @planetexpress/app:
  stage: "Build Image"
  variables:
    INVALID_GIT_FILES_CHANGES: "true"
  dependencies:
    - Install app
  needs:
    - Install app
  image: node:12-alpine
  script:
    - yarn workspace @planetexpress/app build
  artifacts:
    expire_in: 1 day
    paths:
      - packages/app/.next

################################################################################################
###################################                    #########################################
###################################     REGISTRATION   #########################################
###################################                    #########################################
################################################################################################

#
# docker image registration
# these base jobs can be reused to build and publish your docker images
#

.base_docker_image_stage:
  image: docker:19
  services:
    - docker:19-dind



.base_stage:
  except:
    variables:
      # Don't run when running e2e tests
      - $E2E_TEST
      # Don't run when deploying in production an existing image
      - $PRODUCTION
      # Don't run when tagging a commit
      - $RELEASE

.register_stage:
  extends: .base_stage
  stage: "Registration"
  interruptible: true
  dependencies: []

Register app image:
  extends:
    - .base_register_stage
    - .register_stage
  dependencies:
    - Build @planetexpress/app
  needs:
    - Install app
    - Build @planetexpress/app
  before_script:
    - cp yarn.lock packages/app/yarn.lock
  variables:
    CONTEXT: packages/app
    IMAGE_NAME: $CI_REGISTRY_IMAGE/app


############### Deploy APP ###############################

deploy_review:
  image:
    name: lachlanevenson/k8s-kubectl:latest
    entrypoint: ["/bin/sh", "-c"]
  stage: "Deploy"
  environment:
    name: review/$CI_BUILD_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.planetexpress.dev
  before_script:
    - apk add -u gettext
    - kubectl create secret docker-registry regcred --docker-server=$CI_REGISTRY --docker-username="$CI_DEPLOY_USER" --docker-password="$CI_DEPLOY_PASSWORD" --docker-email="$GITLAB_USER_EMAIL" --dry-run=true -o yaml | kubectl apply -f -    
  script:
    - kubectl version
    - echo "----------"
    - echo "----------"
    - echo "https://${CI_ENVIRONMENT_SLUG}.planetexpress.dev"
    - echo "----------"
    - echo "----------"
    - echo "${K8S_NAMESPACE}"
    - echo "${KUBECONFIG}"
    - echo "${KUBE_NAMESPACE}"
    - echo "${KUBE_TOKEN}"    
    - echo $CI_BUILD_REF_NAME
    - echo "$CI_REGISTRY_IMAGE/app:$CI_COMMIT_SHA"
    - echo $CI_REGISTRY
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_COMMIT_SHA
    - cd .k8s/
    - sed -i "s~__CI_REGISTRY_IMAGE__~${CI_REGISTRY_IMAGE}~" deployment.yaml
    - sed -i "s~__CI_ENVIRONMENT_SLUG__~${CI_ENVIRONMENT_SLUG}~" deployment.yaml ingress.yaml service.yaml
    - sed -i "s~__CI_COMMIT_SHA__~${CI_COMMIT_SHA}~" deployment.yaml ingress.yaml service.yaml
    - |
      if kubectl apply -f deployment.yaml | grep -q unchanged; then
          echo "=> Patching deployment to force image update."
          kubectl patch -f deployment.yaml -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"ci-last-updated\":\"$(date +'%s')\"}}}}}"
      else
          echo "=> Deployment apply has changed the object, no need to force image update."
      fi
    - kubectl apply -f service.yaml || true
    - kubectl apply -f ingress.yaml
    - kubectl rollout status -f deployment.yaml
    - kubectl get deploy,svc,ing,pod -l app="$(echo ${CI_PROJECT_NAME} | tr "." "-")",ref="${CI_ENVIRONMENT_SLUG}"